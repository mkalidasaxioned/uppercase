name: Deploy1 modified Google Cloud Functions
on: push
  # push:
  #   branches:
  #   - dev
  #   - stage
  #   - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    # env:
    #   PROJECT: # Replace with your Google Cloud Project ID.

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Setup Google Cloud SDK
    #   uses: google-github-actions/setup-gcloud@v1
    #   with:
    #     project_id: ${{ env.PROJECT }}
    #     service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    #     export_default_credentials: true

    - name: Identify Modified Functions
      id: identify-modified-functions
      run: |
        # Check if there's only one commit in the repository
        if [ "$(git rev-list --count HEAD)" -eq "1" ]; then
          CHANGED_FUNCTIONS=$(git diff --name-only HEAD~1..HEAD)
          echo "ifff"
        else
          CHANGED_FUNCTIONS=$(git diff --name-only HEAD^..HEAD)
          echo "elseeee"
        fi
        echo "Modified functions: $CHANGED_FUNCTIONS"

        # echo "::set-output name=modified_functions::$CHANGED_FUNCTIONS"

        # # Loop through changed files and extract function names
        # for file in $changed_files; do
        #   if [[ "$file" == "function1/"* ]]; then
        #     # Example: Check if the file is in the "function1" directory
        #     extract_function_names "$file"
        #   elif [[ "$file" == "function2/"* ]]; then
        #     # Example: Check if the file is in the "function2" directory
        #     extract_function_names "$file"
        #   # Add more conditions for other function directories as needed
        #   fi
        # done

        # # Combine and deduplicate function names
        # modified_functions=$(echo "${modified_functions[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')

        # # Set the modified functions as an output variable
        # echo "::set-output name=modified-functions::$modified_functions"

    # - name: Read Function Mapping
    #   id: read_mapping
    #   run: |
    #     # Replace with your logic to read the function mapping file
    #     # Example: echo ::set-output name=mapping::$(cat function_mapping.json)

    # - name: Deploy Modified Functions to Google Cloud
    #   run: |
    #     IFS=$'\n' read -d '' -ra CHANGED_FUNCTIONS <<< "${{ steps.identify-modified-functions.outputs.modified-functions }}"
    #     MAPPING=${{ steps.read_mapping.outputs.mapping }}
    #     for FUNCTION in "${CHANGED_FUNCTIONS[@]}"; do
    #       DIR=$(echo "$MAPPING" | jq -r ".$FUNCTION")
    #       if [ "$DIR" != "null" ]; then
    #         cd "$DIR"
    #         # Replace the following line with your actual deployment command
    #         gcloud functions deploy $FUNCTION \
    #           --runtime=nodejs16 \
    #           --trigger-http \
    #           --allow-unauthenticated
    #       else
    #         echo "Error: Function directory not found for $FUNCTION"
    #       fi
    #     done
